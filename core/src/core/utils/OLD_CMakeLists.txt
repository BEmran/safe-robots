# ##############################################################################
# Create header file list for core library
# ##############################################################################
set(CORE_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include/core/utils)
set(CORE_HEADER_LIST
    ${CORE_INCLUDE_DIR}/cash.hpp
    ${CORE_INCLUDE_DIR}/data.hpp
    ${CORE_INCLUDE_DIR}/date_time.hpp
    ${CORE_INCLUDE_DIR}/event_level.hpp
    ${CORE_INCLUDE_DIR}/exception.hpp
    ${CORE_INCLUDE_DIR}/formatter.hpp
    ${CORE_INCLUDE_DIR}/system.hpp
    ${CORE_INCLUDE_DIR}/terminal.hpp
    ${CORE_INCLUDE_DIR}/logger.hpp
    ${CORE_INCLUDE_DIR}/math.hpp
    ${CORE_INCLUDE_DIR}/module.hpp
    ${CORE_INCLUDE_DIR}/node.hpp
    ${CORE_INCLUDE_DIR}/writter_console.hpp
    ${CORE_INCLUDE_DIR}/writter_file.hpp
    ${CORE_INCLUDE_DIR}/writter.hpp)

# ##############################################################################
# Create source file list for core library
# ##############################################################################
set(CORE_SOURCE_DIR ${PROJECT_SOURCE_DIR}/src/core/utils)
set(CORE_SOURCE_LIST
    ${CORE_SOURCE_DIR}/date_time.cpp
    ${CORE_SOURCE_DIR}/event_level.cpp
    ${CORE_SOURCE_DIR}/formatter.cpp
    ${CORE_SOURCE_DIR}/system.cpp
    ${CORE_SOURCE_DIR}/terminal.cpp
    ${CORE_SOURCE_DIR}/logger.cpp
    ${CORE_SOURCE_DIR}/module.cpp
    ${CORE_SOURCE_DIR}/node.cpp
    ${CORE_SOURCE_DIR}/writter_console.cpp
    ${CORE_SOURCE_DIR}/writter_file.cpp)
set(SENSORS_SOURCE_LIST
    ${SENSORS_SOURCE_DIR}/module_sensor_imu.cpp
    ${SENSORS_SOURCE_DIR}/module_sensor.cpp)
# ##############################################################################
# Build core library
# ##############################################################################
# Declare a C++ library Make an automatic library - will be static or dynamic
# based on user setting
add_library(${CORE_LIBRARY} ${CORE_SOURCE_LIST} ${CORE_HEADER_LIST})

# Global includes
target_include_directories(
    ${CORE_LIBRARY}
    PUBLIC $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>
           $<INSTALL_INTERFACE:${ABSOLUTE_INSTALL_INCLUDEDIR}>
)

# Link required library
target_link_libraries(${CORE_LIBRARY} PRIVATE stdc++fs Eigen3::Eigen)

# All users of this library will need at least C++17
target_compile_features(${CORE_LIBRARY} PUBLIC cxx_std_17)

target_compile_options(${CORE_LIBRARY} PRIVATE ${PROJECT_WARNINGS})

# IDEs should put the headers in a nice place
source_group(
    TREE "${PROJECT_SOURCE_DIR}/include"
    PREFIX "Header Files"
    FILES ${CORE_HEADER_LIST})

# ##############################################################################
# Install
# ##############################################################################

install(
    TARGETS ${CORE_LIBRARY} 
    # IMPORTANT: Add the core_library to the "export-set"
    EXPORT ${TARGETS_EXPORT_NAME}
    LIBRARY DESTINATION ${ABSOLUTE_INSTALL_LIBDIR} COMPONENT shlib
    ARCHIVE DESTINATION ${ABSOLUTE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${ABSOLUTE_INSTALL_BINDIR} COMPONENT bin
    INCLUDES
    DESTINATION ${ABSOLUTE_INSTALL_INCLUDEDIR}
    # PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/core COMPONENT dev
)

install(
    DIRECTORY ${CORE_INCLUDE_DIR}/
    DESTINATION ${ABSOLUTE_INSTALL_INCLUDEDIR}
    COMPONENT PATTERN
    "${CORE_HEADER_LIST}")